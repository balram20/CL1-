
# Import necessary libraries
import pandas as pd
import numpy as np

# Task 1: Import the dataset and clean column names
data = pd.read_csv("Bengaluru_House_Data.csv")
data.columns = data.columns.str.strip()  # Remove leading/trailing spaces from column names
data.columns = data.columns.str.replace(' ', '_')  # Replace spaces with underscores
data.columns = data.columns.str.replace('[^a-zA-Z0-9_]', '', regex=True)  # Remove special characters
data.columns = data.columns.str.lower()  # Convert column names to lowercase

# Task 2: Handle missing values
# Let's start by checking for missing values in each column
missing_values = data.isnull().sum()

# You can decide on an appropriate strategy for each column with missing values.
# For example, for the 'society' column, you can fill missing values with 'Unknown'.
data['society'].fillna('Unknown', inplace=True)

# For numeric columns like 'balcony' and 'bath', you can impute missing values with the mean or median.
data['balcony'].fillna(data['balcony'].median(), inplace=True)
data['bath'].fillna(data['bath'].median(), inplace=True)

# Task 3: Data merging (if additional datasets are available, merge them here)

# Task 4: Filter and subset the data based on specific criteria
# For example, filter based on location, property type, or time period.
# Here, we're filtering properties in a specific location and property type.
filtered_data = data[(data['location'] == 'Whitefield') & (data['size'] == '3 BHK')]

# Task 5: Handle categorical variables
# You can use one-hot encoding or label encoding for categorical variables.
# Example of one-hot encoding for the 'area_type' column:
data = pd.get_dummies(data, columns=['area_type'], prefix='area_type')

# Task 6: Aggregating data to calculate summary statistics
# For example, you can calculate the average sale prices by neighborhood.
average_prices_by_location = data.groupby('location')['price'].mean()

# Task 7: Identify and handle outliers
# You can use statistical methods like Z-scores or visual inspection to identify and handle outliers.
# Example of removing outliers based on 'price' column:
z_scores = np.abs((data['price'] - data['price'].mean()) / data['price'].std())
data_no_outliers = data[z_scores < 3]

# Now you have a clean and prepared dataset for further analysis or modeling.

# Save the cleaned dataset to a new CSV file (optional)
data.to_csv("cleaned_bengaluru_house_data.csv", index=False)
